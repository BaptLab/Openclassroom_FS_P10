name: CI/CD
run-name: ${{ github.actor }} is working on GitHub Actions !
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_EMAIL }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push (Back)
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bobapp-back:latest

      - name: Build and push (Front)
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/bobapp-front:latest

  Backend-Tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with: 
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      - name: Build with Maven
        working-directory: ./back
        run: mvn -B package --file pom.xml
            
      - name: Test with Maven
        working-directory: ./back
        run: mvn -B clean test

      - name: Upload Jacoco Report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: ./back/target/site/jacoco
        
  Frontend-Tests:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js ${{matrix.node-version}}
        uses: actions/setup-node@v1
        with:
          node-version: ${{matrix.node-version}}

      - name: Run npm install 
        working-directory: ./front
        run: npm install

      - name: Run npm test
        working-directory: ./front
        run: npm run test:prod

      - name: Upload Karma Report
        uses: actions/upload-artifact@v3
        with:
          name: karma-report
          path: ./front/coverage
          
sonarQube-Analysis-Backend:
    runs-on: ubuntu-latest
    needs: [backendTests, frontendTests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        working-directory: ./back
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

sonarQubeAnalysisFrontend:
  runs-on: ubuntu-latest
  needs: [backendTests, frontendTests]
  steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Use Node.js ${{matrix.node-version}}
      uses: actions/setup-node@v3
      with:
        node-version: ${{matrix.node-version}}

    - name: Install Front-end Dependencies
      working-directory: ./front
      run: npm install

    - name: Run Front-end Tests
      working-directory: ./front
      run: npm run test:prod

    - name: SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      working-directory: ./front
      run: npm run sonar-scanner
